// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2015 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

using System;
using System.Runtime.InteropServices;

namespace Steamworks {
	public static class SteamController {
		/// <summary>
		/// <para> Native controller support API</para>
		/// <para> Must call init and shutdown when starting/ending use of the interface</para>
		/// </summary>
		public static bool Init(string pchAbsolutePathToControllerConfigVDF) {
			InteropHelp.TestIfAvailableClient();
			using (var pchAbsolutePathToControllerConfigVDF2 = new InteropHelp.UTF8StringHandle(pchAbsolutePathToControllerConfigVDF)) {
				return NativeMethods.ISteamController_Init(pchAbsolutePathToControllerConfigVDF2);
			}
		}

		public static bool Shutdown() {
			InteropHelp.TestIfAvailableClient();
			return NativeMethods.ISteamController_Shutdown();
		}

		/// <summary>
		/// <para> Pump callback/callresult events, SteamAPI_RunCallbacks will do this for you,</para>
		/// <para> normally never need to call directly.</para>
		/// </summary>
		public static void RunFrame() {
			InteropHelp.TestIfAvailableClient();
			NativeMethods.ISteamController_RunFrame();
		}

		/// <summary>
		/// <para> Get the state of the specified controller, returns false if that controller is not connected</para>
		/// </summary>
		public static bool GetControllerState(uint unControllerIndex, out SteamControllerState_t pState) {
			InteropHelp.TestIfAvailableClient();
			return NativeMethods.ISteamController_GetControllerState(unControllerIndex, out pState);
		}

		/// <summary>
		/// <para> Trigger a haptic pulse on the controller</para>
		/// </summary>
		public static void TriggerHapticPulse(uint unControllerIndex, ESteamControllerPad eTargetPad, ushort usDurationMicroSec) {
			InteropHelp.TestIfAvailableClient();
			NativeMethods.ISteamController_TriggerHapticPulse(unControllerIndex, eTargetPad, usDurationMicroSec);
		}

		/// <summary>
		/// <para> Set the override mode which is used to choose to use different base/legacy bindings from your config file</para>
		/// </summary>
		public static void SetOverrideMode(string pchMode) {
			InteropHelp.TestIfAvailableClient();
			using (var pchMode2 = new InteropHelp.UTF8StringHandle(pchMode)) {
				NativeMethods.ISteamController_SetOverrideMode(pchMode2);
			}
		}
	}
}